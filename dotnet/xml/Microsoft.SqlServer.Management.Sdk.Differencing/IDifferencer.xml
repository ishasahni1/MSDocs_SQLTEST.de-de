<Type Name="IDifferencer" FullName="Microsoft.SqlServer.Management.Sdk.Differencing.IDifferencer">
  <TypeSignature Language="C#" Value="public interface IDifferencer" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDifferencer" />
  <TypeSignature Language="DocId" Value="T:Microsoft.SqlServer.Management.Sdk.Differencing.IDifferencer" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.SqlServer.Management.Sdk.Sfc</AssemblyName>
    <AssemblyVersion>14.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            Diese Schnittstelle definiert den differenzielle-Dienst auf SFC und SMO-Objekte. Der Dienst führt und vergleicht zwei angegebene Diagrammen und gibt ein DiffGram-Objekt (IEnumerable&lt;DiffEntry&gt;) repräsentiert den Unterschied.
            
            It is late-activated, meaning that it does not walk the graphs until the enumerator 
            is accessed.
            </summary>
    <remarks>Muss hinzugefügt werden.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CompareGraphs">
      <MemberSignature Language="C#" Value="public Microsoft.SqlServer.Management.Sdk.Differencing.IDiffgram CompareGraphs (object source, object target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.SqlServer.Management.Sdk.Differencing.IDiffgram CompareGraphs(object source, object target) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Management.Sdk.Differencing.IDifferencer.CompareGraphs(System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>14.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Management.Sdk.Differencing.IDiffgram</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="target" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">Der Stammknoten des zu vergleichenden Quelldiagramms.</param>
        <param name="target">Der Stammknoten des zu vergleichenden Zieldiagramms.</param>
        <summary>
            Vergleicht zwei Diagramme (unten), und gibt die Differenz zurück.
            
            The result of CompareGraphs represents the difference 
            to be applied to the target to obtain the source. 
            (i.e., target + diff =&gt; source) 
            
            To support both SMO and SFC, the input are left as 'object' type. However, it 
            allows only SqlSmoObject or SfcObject. This method throws InvalidArgumentException 
            if the type of the specified objects is invalid.
            
            Two graphs are said to comparable (i.e., have the same type), if they have the same 
            structure at all levels, which means each node has the same type of children and 
            properties. If the specified graphs are not comparable, this method throws 
            InvalidArgumentException.
            
            When a nodes on each graph has the same identity (represented by Urn in both 
            SMO and SFC), it is said to be identical. When two identical nodes have the same 
            values for all Properties, they are  said to be equivalent (disregard the children 
            they have).
            
            During the comparison, this Service will examine all relevant nodes. (The relevance 
            of nodes and properties is domain-specific.) For each pair of identical nodes from both sides, 
            the Service compares all relevent Properties. If the nodes are not equivalent, a 
            DiffEntry with DiffType.Updated are added to the result. The children will then be 
            compared.
            
            When a child appears in the source but not in the target, an DiffEntry with 
            DiffType.Created is added to the result, likewise for DiffType.Deleted.
            
            The Differencer walks the children (of all level) of a Created or Deleted node.
            The children entries are included in the result.
            
            Finally, each pair of identical children is checked for equivalence.
            
            CompareGraphs() scales to very large graphs and does not retain the entire graphs in 
            memory if possible. Applications using this service should not have logic that depends 
            on the ordering of the results, which may be different when the implementation changes 
            in the future for further optimization.
            
            The current implementation walks the tree in late-activate fashion. Resetting the result 
            IEnumerator might result in the graphs being walked again. 
            
            The result IDiffgram is not thread-safe.
            </summary>
        <returns />
        <remarks>Muss hinzugefügt werden.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTypeEmitted">
      <MemberSignature Language="C#" Value="public bool IsTypeEmitted (Microsoft.SqlServer.Management.Sdk.Differencing.DiffType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsTypeEmitted(valuetype Microsoft.SqlServer.Management.Sdk.Differencing.DiffType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Management.Sdk.Differencing.IDifferencer.IsTypeEmitted(Microsoft.SqlServer.Management.Sdk.Differencing.DiffType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>14.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.SqlServer.Management.Sdk.Differencing.DiffType" />
      </Parameters>
      <Docs>
        <param name="type">Der zu überprüfende DiffType</param>
        <summary>
            "True", um anzugeben, dass die angegebenen DiffType Einträge in der diffgramm enthalten sind.
            </summary>
        <returns>"true", um anzugeben, den angegebenen DiffType Einträge sind in diffgramm enthalten.</returns>
        <remarks>Muss hinzugefügt werden.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTypeEmitted">
      <MemberSignature Language="C#" Value="public void SetTypeEmitted (Microsoft.SqlServer.Management.Sdk.Differencing.DiffType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetTypeEmitted(valuetype Microsoft.SqlServer.Management.Sdk.Differencing.DiffType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Management.Sdk.Differencing.IDifferencer.SetTypeEmitted(Microsoft.SqlServer.Management.Sdk.Differencing.DiffType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>14.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.SqlServer.Management.Sdk.Differencing.DiffType" />
      </Parameters>
      <Docs>
        <param name="type">Der zu überprüfende DiffType</param>
        <summary>
            Legen Sie den angegebenen DiffType in diffgramm aufgenommen werden. Diese Option wirkt sich auf die DiffEntry, nur dann, wenn sie festgelegt ist, bevor CompareGraphs() aufgerufen wird.
            </summary>
        <remarks>Muss hinzugefügt werden.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnsetTypeEmitted">
      <MemberSignature Language="C#" Value="public void UnsetTypeEmitted (Microsoft.SqlServer.Management.Sdk.Differencing.DiffType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnsetTypeEmitted(valuetype Microsoft.SqlServer.Management.Sdk.Differencing.DiffType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Management.Sdk.Differencing.IDifferencer.UnsetTypeEmitted(Microsoft.SqlServer.Management.Sdk.Differencing.DiffType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>14.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.SqlServer.Management.Sdk.Differencing.DiffType" />
      </Parameters>
      <Docs>
        <param name="type">Der zu überprüfende DiffType</param>
        <summary>
            Nicht festgelegter (oder deaktivieren) der angegebenen DiffType aus diffgramm ausgeschlossen werden sollen.
Diese Option wirkt sich auf die DiffEntry, nur dann, wenn sie festgelegt ist, bevor CompareGraphs() aufgerufen wird.
            </summary>
        <remarks>Muss hinzugefügt werden.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
