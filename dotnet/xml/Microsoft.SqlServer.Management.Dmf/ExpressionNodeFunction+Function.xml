<Type Name="ExpressionNodeFunction+Function" FullName="Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction+Function">
  <TypeSignature Language="C#" Value="public enum ExpressionNodeFunction.Function" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi sealed ExpressionNodeFunction/Function extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction.Function" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.SqlServer.Dmf</AssemblyName>
    <AssemblyVersion>14.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>
            Funktionstyp
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="Add" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction/Function Add = int32(11)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction.Function.Add" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>14.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction+Function</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Fügen Sie zwei Werte hinzu
            </summary>
      </Docs>
    </Member>
    <Member MemberName="Array">
      <MemberSignature Language="C#" Value="Array" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction/Function Array = int32(10)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction.Function.Array" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>14.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction+Function</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Ein Array von Werten zurückgeben
            </summary>
      </Docs>
    </Member>
    <Member MemberName="Avg">
      <MemberSignature Language="C#" Value="Avg" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction/Function Avg = int32(6)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction.Function.Avg" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>14.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction+Function</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Durchschnitt einer Reihe von Werten
            </summary>
      </Docs>
    </Member>
    <Member MemberName="BitwiseAnd">
      <MemberSignature Language="C#" Value="BitwiseAnd" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction/Function BitwiseAnd = int32(15)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction.Function.BitwiseAnd" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>14.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction+Function</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Bitweises AND
            </summary>
      </Docs>
    </Member>
    <Member MemberName="BitwiseOr">
      <MemberSignature Language="C#" Value="BitwiseOr" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction/Function BitwiseOr = int32(16)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction.Function.BitwiseOr" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>14.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction+Function</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Bitweises OR
            </summary>
      </Docs>
    </Member>
    <Member MemberName="Concatenate">
      <MemberSignature Language="C#" Value="Concatenate" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction/Function Concatenate = int32(28)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction.Function.Concatenate" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>14.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction+Function</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Verketten von Zeichenfolgen
            </summary>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="Count" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction/Function Count = int32(7)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction.Function.Count" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>14.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction+Function</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Eine Reihe von Werten zählen
            </summary>
      </Docs>
    </Member>
    <Member MemberName="DateAdd">
      <MemberSignature Language="C#" Value="DateAdd" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction/Function DateAdd = int32(3)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction.Function.DateAdd" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>14.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction+Function</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Fügen Sie eine Zahl in ein Datum
            </summary>
      </Docs>
    </Member>
    <Member MemberName="DatePart">
      <MemberSignature Language="C#" Value="DatePart" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction/Function DatePart = int32(4)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction.Function.DatePart" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>14.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction+Function</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Extrahiert einen Teil eines Datums
            </summary>
      </Docs>
    </Member>
    <Member MemberName="DateTime">
      <MemberSignature Language="C#" Value="DateTime" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction/Function DateTime = int32(21)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction.Function.DateTime" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>14.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction+Function</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Geben Sie einen datetime-Wert aus einer Zeichenfolge zurück
            </summary>
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="Divide" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction/Function Divide = int32(14)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction.Function.Divide" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>14.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction+Function</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Ein Wert von einem anderen Teilen
            </summary>
      </Docs>
    </Member>
    <Member MemberName="Enum">
      <MemberSignature Language="C#" Value="Enum" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction/Function Enum = int32(20)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction.Function.Enum" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>14.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction+Function</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Die textbeschreibung für eine Enumeration zurück
            </summary>
      </Docs>
    </Member>
    <Member MemberName="Escape">
      <MemberSignature Language="C#" Value="Escape" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction/Function Escape = int32(29)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction.Function.Escape" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>14.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction+Function</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Escape-Zeichenfolge defekt 247787, die Möglichkeit, dynamische Argumente an ExecuteWQL übergeben
            </summary>
      </Docs>
    </Member>
    <Member MemberName="ExecuteSql">
      <MemberSignature Language="C#" Value="ExecuteSql" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction/Function ExecuteSql = int32(0)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction.Function.ExecuteSql" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>14.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction+Function</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Skalare SQL ausführen
            </summary>
      </Docs>
    </Member>
    <Member MemberName="ExecuteWql">
      <MemberSignature Language="C#" Value="ExecuteWql" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction/Function ExecuteWql = int32(1)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction.Function.ExecuteWql" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>14.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction+Function</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Führen Sie die WMI-Abfrage
            </summary>
      </Docs>
    </Member>
    <Member MemberName="False">
      <MemberSignature Language="C#" Value="False" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction/Function False = int32(24)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction.Function.False" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>14.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction+Function</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Logische "false"
            </summary>
      </Docs>
    </Member>
    <Member MemberName="GetDate">
      <MemberSignature Language="C#" Value="GetDate" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction/Function GetDate = int32(2)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction.Function.GetDate" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>14.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction+Function</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Abrufen des aktuellen Datums
            </summary>
      </Docs>
    </Member>
    <Member MemberName="Guid">
      <MemberSignature Language="C#" Value="Guid" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction/Function Guid = int32(25)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction.Function.Guid" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>14.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction+Function</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Zurückgeben der Guid aus einer Zeichenfolge
            </summary>
      </Docs>
    </Member>
    <Member MemberName="IsNull">
      <MemberSignature Language="C#" Value="IsNull" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction/Function IsNull = int32(9)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction.Function.IsNull" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>14.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction+Function</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Ersetzen Sie einen Wert für Null-Zeichen 
            </summary>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="Len" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction/Function Len = int32(8)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction.Function.Len" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>14.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction+Function</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Die Länge einer Zeichenfolge abrufen
            </summary>
      </Docs>
    </Member>
    <Member MemberName="Lower">
      <MemberSignature Language="C#" Value="Lower" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction/Function Lower = int32(27)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction.Function.Lower" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>14.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction+Function</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Lower-case Rückgabezeichenfolge
            </summary>
      </Docs>
    </Member>
    <Member MemberName="Mod">
      <MemberSignature Language="C#" Value="Mod" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction/Function Mod = int32(18)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction.Function.Mod" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>14.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction+Function</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Zurückgeben der Restwert der Division einer Zahl durch eine andere
            </summary>
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="Multiply" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction/Function Multiply = int32(13)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction.Function.Multiply" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>14.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction+Function</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Mehrere zwei Werte
            </summary>
      </Docs>
    </Member>
    <Member MemberName="Power">
      <MemberSignature Language="C#" Value="Power" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction/Function Power = int32(17)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction.Function.Power" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>14.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction+Function</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Einen Wert, der einer Potenz auslösen
            </summary>
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="Round" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction/Function Round = int32(19)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction.Function.Round" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>14.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction+Function</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Rundet eine Zahl
            </summary>
      </Docs>
    </Member>
    <Member MemberName="String">
      <MemberSignature Language="C#" Value="String" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction/Function String = int32(22)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction.Function.String" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>14.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction+Function</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Konvertiert einen Wert in eine Zeichenfolge
            </summary>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="Subtract" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction/Function Subtract = int32(12)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction.Function.Subtract" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>14.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction+Function</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Subtrahieren Sie zwei Werte
            </summary>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="Sum" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction/Function Sum = int32(5)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction.Function.Sum" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>14.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction+Function</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Die Summe einer Reihe von Werten
            </summary>
      </Docs>
    </Member>
    <Member MemberName="True">
      <MemberSignature Language="C#" Value="True" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction/Function True = int32(23)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction.Function.True" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>14.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction+Function</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Logische "true"
            </summary>
      </Docs>
    </Member>
    <Member MemberName="Upper">
      <MemberSignature Language="C#" Value="Upper" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction/Function Upper = int32(26)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction.Function.Upper" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>14.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction+Function</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Großbuchstaben Rückgabezeichenfolge
            </summary>
      </Docs>
    </Member>
  </Members>
</Type>
