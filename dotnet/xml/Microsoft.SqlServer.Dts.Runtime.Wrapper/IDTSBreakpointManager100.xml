<Type Name="IDTSBreakpointManager100" FullName="Microsoft.SqlServer.Dts.Runtime.Wrapper.IDTSBreakpointManager100">
  <TypeSignature Language="C#" Value="public interface IDTSBreakpointManager100" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDTSBreakpointManager100" />
  <TypeSignature Language="DocId" Value="T:Microsoft.SqlServer.Dts.Runtime.Wrapper.IDTSBreakpointManager100" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.SqlServer.DTSRuntimeWrap</AssemblyName>
    <AssemblyVersion>14.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("4270BFB2-5868-4A75-BB4A-D21819A22CDE")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(System.Runtime.InteropServices.TypeLibTypeFlags.FDual | System.Runtime.InteropServices.TypeLibTypeFlags.FDispatchable)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt Methoden zur Verwaltung aller Breakpoints bereit, die für einen Task festgelegt wurden.</summary>
    <remarks>Muss hinzugefügt werden.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ClearBreakpointTargets">
      <MemberSignature Language="C#" Value="public void ClearBreakpointTargets ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ClearBreakpointTargets() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Dts.Runtime.Wrapper.IDTSBreakpointManager100.ClearBreakpointTargets" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>14.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(4)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Bei der Implementierung in einer abgeleiteten Klasse werden alle für einen Task festgelegten Breakpoints entfernt.</summary>
        <remarks>Muss hinzugefügt werden.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateBreakpointTarget">
      <MemberSignature Language="C#" Value="public Microsoft.SqlServer.Dts.Runtime.Wrapper.IDTSBreakpointTarget100 CreateBreakpointTarget (int breakpointID, string Description);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.SqlServer.Dts.Runtime.Wrapper.IDTSBreakpointTarget100 CreateBreakpointTarget(int32 breakpointID, string Description) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Dts.Runtime.Wrapper.IDTSBreakpointManager100.CreateBreakpointTarget(System.Int32,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>14.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Dts.Runtime.Wrapper.IDTSBreakpointTarget100</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="breakpointID" Type="System.Int32" />
        <Parameter Name="Description" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="breakpointID">Die ID, die dem Breakpoint zugewiesen werden soll, um ihn von anderen Breakpoints zu unterscheiden.</param>
        <param name="Description">Eine Zeichenfolge, die den Breakpoint beschreibt.</param>
        <summary>Bei der Implementierung in einer abgeleiteten Klasse wird ein neuer Breakpoint im Task mit der angegebenen ID und Beschreibung des Breakpoints erstellt.</summary>
        <returns>Ein <see cref="T:Microsoft.SqlServer.Dts.Runtime.Wrapper.IDTSBreakpointTarget100" /> Objekt.</returns>
        <remarks>Muss hinzugefügt werden.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBreakpointTarget">
      <MemberSignature Language="C#" Value="public Microsoft.SqlServer.Dts.Runtime.Wrapper.IDTSBreakpointTarget100 GetBreakpointTarget (int breakpointID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.SqlServer.Dts.Runtime.Wrapper.IDTSBreakpointTarget100 GetBreakpointTarget(int32 breakpointID) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Dts.Runtime.Wrapper.IDTSBreakpointManager100.GetBreakpointTarget(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>14.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(3)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Dts.Runtime.Wrapper.IDTSBreakpointTarget100</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="breakpointID" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="breakpointID">Die ID des zurückzugebenden Breakpoints.</param>
        <summary>Bei der Implementierung in einer abgeleiteten Klasse wird das Breakpointobjekt für eine bestimmte Breakpoint-ID zurückgegeben.</summary>
        <returns>Ein <see cref="T:Microsoft.SqlServer.Dts.Runtime.Wrapper.IDTSBreakpointTarget100" /> Objekt.</returns>
        <remarks>Muss hinzugefügt werden.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBreakpointTargetEnabled">
      <MemberSignature Language="C#" Value="public bool IsBreakpointTargetEnabled (int breakpointID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsBreakpointTargetEnabled(int32 breakpointID) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Dts.Runtime.Wrapper.IDTSBreakpointManager100.IsBreakpointTargetEnabled(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>14.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="breakpointID" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="breakpointID">Die ID des Breakpoints, den Sie daraufhin überprüfen möchten, ob er aktiviert ist oder nicht.</param>
        <summary>Beim Implementieren in einer abgeleiteten Klasse gibt einen booleschen Wert ab, der angibt, ob der Breakpoint aktiviert ist.</summary>
        <returns>"true", wenn der Haltepunkt aktiviert ist; andernfalls "false".</returns>
        <remarks>Muss hinzugefügt werden.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveBreakpointTarget">
      <MemberSignature Language="C#" Value="public void RemoveBreakpointTarget (int breakpointID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveBreakpointTarget(int32 breakpointID) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Dts.Runtime.Wrapper.IDTSBreakpointManager100.RemoveBreakpointTarget(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>14.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="breakpointID" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="breakpointID">Die ID des zu entfernenden Breakpoints.</param>
        <summary>Bei der Implementierung in einer abgeleiteten Klasse wird ein zuvor erstellter Breakpoint aus einem Task entfernt.</summary>
        <remarks>Muss hinzugefügt werden.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
